#!/usr/bin/python2
import Tkinter, tkFileDialog
import Image, ImageDraw

def draw():
   image = Image.new('RGB', (50, 50))
   draw = ImageDraw.Draw(image)
   draw.ellipse((10, 10, 30, 30), outline = 'red')
   draw.ellipse((35, 35, 45, 45), outline = 'blue')
   #name = raw_input("Name of the new image: ")
   image.save('image2.png')
   
def open(file_path = None):
   if file_path == None:
      root = Tkinter.Tk()
      root.withdraw()
      file_path = tkFileDialog.askopenfilename()
      image = Image.open(file_path)
   else:
      image = Image.open(file_path)
      
def getbgcolor(image):
   w, h = image.size
   colors = {}
   for x in xrange(0, w):
      for y in xrange(0, h):
         c = image.getpixel((x, y))
         number = colors.get(c, None)
         if number == None:
            colors[c] = 1
         else:
            colors[c] = number + 1
   maximum = max(colors.values())
   print colors
   for c in colors:
      if colors[c] == maximum:
         bgcolor = c
   return bgcolor

def findFigure(image):
   w, h = image.size
   xmin = w
   xmax = 0
   ymin = h
   ymax = 0
   bgcolor = getbgcolor(image)
   for x in xrange(0, w):
      for y in xrange(0, h):
         if image.getpixel((x, y)) != bgcolor:
            if x < xmin:
               xmin = x
            if x > xmax:
               xmax = x
            if y < ymin:
               ymin = y
            if y > ymax:
               ymax = y
   draw = ImageDraw.Draw(image)
   draw.rectangle((xmin, ymin, xmax, ymax), outline = 'green')
   image.save('newimage.png')

def dfs(image):
   bgcolor = getbgcolor(image)
   w, h = image.size[0], image.size[1]
   print w, h
   start = 0, 0
   s = list()
   s.append(start)
   visited = list()
   figures = list()
   while len(s)!=0:
      x, y = s.pop()
      if (x, y) not in visited:
         if x < w and y < h and x >= 0 and y >= 0:
            if image.getpixel((x, y)) != bgcolor:
               figures.append((x, y))
            visited.append((x, y))
            s.extend(neighborhood(x, y))
   return figures

def neighborhood(x, y):
   neighbor = list()
   neighbor.append((x-1, y-1))
   neighbor.append((x, y-1))
   neighbor.append((x+1, y-1))
   neighbor.append((x-1, y))
   neighbor.append((x+1, y))
   neighbor.append((x-1, y+1))
   neighbor.append((x, y+1))
   neighbor.append((x+1, y+1))
   return neighbor

# def different(image):
#    w, h = image.size[0], image.size[1]
#    bgcolor = getbgcolor(image)
#    different = list()
#    for x in xrange(0, w):
#       for y in xrange(0, h):
#          if image.getpixel((x, y)) != bgcolor:
#             different.append((x, y))
#    return different
  
def main():
   #draw()
   image = Image.open('image2.png')
   #bgcolor = getbgcolor(image)
   figures = dfs(image)
   print figures
   print len(figures)
   visited = list()
   
   start = figures.pop()
   visited.append(start)
   while len(figures)!= 0:
      current = figures.pop()
      if current not in visited:
         if current in neighborhood():
            s.append()
            
   #dif = different(image)
   #print dif
   
   #if len(dif) != 0:
    #  p = dif.pop()
      
   #for i in figures:
      
   #dfs((0, 0), image, bgcolor)
   #findFigure(image)


if __name__=='__main__':
   main()

# import PIL
# import numpy
# pixeles
# mascara
# k, h = ancho y altura de la mascara
# ancho, altura de la imagen
# nueva
# for columna in xrange(0, ancho):
#    for fila un xrange(0, altura):
#       suma = 0.0
#       for c in xrange(0, k):
#          df = -h/2 + f
#          for f in xrange(0, h):
#             suma += pixeles[fila + df, columna + dc] * mascara[f, c]
#       nueva[fila, columna] = suma
# guardar imagen en un archivo con nobre que indica cual imagen y cual mascara se ha utilizado
