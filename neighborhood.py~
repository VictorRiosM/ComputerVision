#!/usr/bin/python2
import Image

A=1
B=-1
masks = [ [B, 0, A, B, 0, A, B, 0, A],
          [0, A, A, B, 0, A, B, B, 0],
          [A, A, A, 0, 0, 0, B, B, B],
          [A, A, 0, A, 0, B, 0, B, B],
          [A, 0, B, A, 0, B, A, 0, B],
          [0, B, B, A, 0, B, A, A, 0],
          [B, B, B, 0, 0, 0, A, A, A],
          [B, B, 0, B, 0, A, 0, A, A] ]


# for m in masks:
#    for n in m:
#       print n


def neighborhood(x, y, width, height):
   nbh = list()
#   if x > 0 and y > 0 and x < width-1 and y < height-1:
   nbh.append((x-1, y-1))
   nbh.append((x, y-1))
   nbh.append((x+1, y-1))
   nbh.append((x-1, y))
   nbh.append((x, y))
   nbh.append((x+1, y))
   nbh.append((x-1, y+1))
   nbh.append((x, y+1))
   nbh.append((x+1, y+1))
   # elif y > 0 and x < width-1 and y < height-1:
   #    nbh.append((x, y-1))
   #    nbh.append((x+1, y-1))
   #    nbh.append((x+1, y))
   #    nbh.append((x, y+1))
   #    nbh.append((x+1, y+1))
   # elif x > 0 and x < width-1 and y < height-1:
   #    nbh.append((x-1, y))
   #    nbh.append((x+1, y))
   #    nbh.append((x-1, y+1))
   #    nbh.append((x, y+1))
   #    nbh.append((x+1, y+1))
   # elif x > 0 and y > 0 and y < height:
   #    nbh.append((x-1, y-1))
   #    nbh.append((x, y-1))
   #    nbh.append((x-1, y))
   #    nbh.append((x-1, y+1))
   #    nbh.append((x, y+1))
   # elif x > 0 and y > 0 and x < height:
   #    nbh.append((x-1, y-1))
   #    nbh.append((x, y-1))
   #    nbh.append((x+1, y-1))
   #    nbh.append((x-1, y))
   #    nbh.append((x+1, y))
   # elif x == 0 and y == 0:
   #    nbh.append((x+1, y))
   #    nbh.append((x, y+1))
   #    nbh.append((x+1, y+1))
   # elif x == width-1 and y == 0:
   #    nbh.append((x-1, y))
   #    nbh.append((x-1, y+1))
   #    nbh.append((x, y+1))
   # elif x == 0 and y == height-1:
   #    nbh.append((x, y-1))
   #    nbh.append((x+1, y-1))
   #    nbh.append((x+1, y))
   # elif x == width-1 and y == height-1:
   #    nbh.append((x-1, y-1))
   #    nbh.append((x, y-1))
   #    nbh.append((x-1, y))
   return nbh
         

def convolution():
   image = Image.open('/home/victor/Pictures/copy.png')
   width, height = image.size
   magnitudes = {}
   for x in xrange(0, width):
      for y in xrange(0, height):
         nbh = neighborhood(x, y, width, height)
         g = []
         i=0
         for m in masks:
            g.append(0)
            j=0
            for n in m:
               w, h = nbh[j]
               if w >= 0 and h >= 0 and w < width-1 and h < height-1:
                  value = image.getpixel(nbh[j])
                  gray = (value[0]+value[1]+value[2])/3
                  g[i] += gray*n
               j+=1
            i+=1
         mag = max(g)
         frequency = magnitudes.get(mag, None)
         if frequency == None:
            magnitudes[mag] = 1
         else:
            magnitudes[mag] = frequency + 1
   return magnitudes


def edgedrawer(threshold):
   image = Image.open('/home/victor/Pictures/copy.png')
   width, height = image.size
   newimage = Image.new('RGB', (width, height))
   for x in xrange(0, width):
      for y in xrange(0, height):
         nbh = neighborhood(x, y, width, height)
         g = []
         i=0
         for m in masks:
            g.append(0)
            j=0
            for n in m:
               w, h = nbh[j]
               if w >= 0 and h >= 0 and w < width-1 and h < height-1:
                  value = image.getpixel(nbh[j])
                  gray = (value[0]+value[1]+value[2])/3
                  g[i] += gray*n
               j+=1
            i+=1
         mag = max(g)
         if mag > threshold:
            newimage.putpixel((x, y), (255, 255, 255))
         else:
            newimage.putpixel((x, y), (0, 0, 0))
   newimage.save('/home/victor/Pictures/newimage2.png')   

magnitudes = convolution()
print magnitudes
threshold = 100
edgedrawer(threshold)
